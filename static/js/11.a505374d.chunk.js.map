{"version":3,"sources":["components/painter/view/components/index.tsx","components/painter/view/components/utils/background.ts"],"names":["_artboard","_artboardBackground","_interactor","_mountedCallback","Painter","backgroundRef","useRef","artboardRef","artboardBackgroundRef","interactorRef","useEffect","current","setupCartesian","id","ref","className","setup","container","Promise","resolve","ReactDOM","render","requestAnimationFrame","artboard","artboardBackground","interactor","getBoundingClientRect","width","height","p5","p","createCanvas","noLoop","delta","piecesVer","Math","floor","piecesHor","stroke","strokeWeight","i","line"],"mappings":"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","file":"static/js/11.a505374d.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { setupCartesian } from './utils/background';\n\n// -- stylesheet -----------------------------------------------------------------------------------\n\nimport './index.scss';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _artboard: HTMLDivElement;\nlet _artboardBackground: HTMLDivElement;\nlet _interactor: HTMLDivElement;\n\nlet _mountedCallback: CallableFunction;\n\n// -- component definition -------------------------------------------------------------------------\n\n/**\n * Painter component.\n * @returns root JSX element of the Painter component\n */\nfunction Painter(): JSX.Element {\n  const backgroundRef = useRef(null);\n  const artboardRef = useRef(null);\n  const artboardBackgroundRef = useRef(null);\n  const interactorRef = useRef(null);\n\n  useEffect(() => {\n    _artboard = artboardRef.current!;\n    _artboardBackground = artboardBackgroundRef.current!;\n    _interactor = interactorRef.current!;\n\n    _mountedCallback();\n\n    setupCartesian(backgroundRef.current!);\n  }, []);\n\n  return (\n    <>\n      <section id=\"artboard-wrapper\">\n        <div id=\"artboard-background\" ref={backgroundRef}></div>\n        <div id=\"artboard-container\">\n          <div className=\"artboard\" ref={artboardRef}></div>\n          <div className=\"artboard-background\" ref={artboardBackgroundRef}></div>\n        </div>\n        <div id=\"artboard-interactor\" ref={interactorRef}></div>\n      </section>\n    </>\n  );\n}\n\n/**\n * Mounts the React component inside the DOM container.\n * @param container DOM container\n * @returns a `Promise` of an object containing the DOM artboard and interactor elements\n */\nexport function setup(container: HTMLElement): Promise<{\n  artboard: HTMLDivElement;\n  artboardBackground: HTMLDivElement;\n  interactor: HTMLDivElement;\n}> {\n  return new Promise((resolve) => {\n    ReactDOM.render(<Painter />, container);\n\n    _mountedCallback = () =>\n      requestAnimationFrame(() => {\n        resolve({\n          artboard: _artboard,\n          artboardBackground: _artboardBackground,\n          interactor: _interactor,\n        });\n      });\n  });\n}\n","import p5 from 'p5';\n\n/**\n * Sets up a canvas with a cartesian grid.\n * @param container DOM container of the grid\n */\nexport function setupCartesian(container: HTMLElement): void {\n    const { width, height } = container.getBoundingClientRect();\n\n    new p5((p: p5) => {\n        p.setup = () => {\n            p.createCanvas(width, height);\n            p.noLoop();\n\n            let delta = 10;\n            let piecesVer = Math.floor((p.width >> 1) / delta);\n            let piecesHor = Math.floor((p.height >> 1) / delta);\n\n            p.stroke(252, 252, 252);\n            p.strokeWeight(1);\n            for (let i = 1; i <= piecesVer; i++) {\n                p.line((p.width >> 1) + i * delta, 0, (p.width >> 1) + i * delta, p.height);\n                p.line((p.width >> 1) - i * delta, 0, (p.width >> 1) - i * delta, p.height);\n            }\n            for (let i = 1; i <= piecesHor; i++) {\n                p.line(0, (p.height >> 1) + i * delta, p.width, (p.height >> 1) + i * delta);\n                p.line(0, (p.height >> 1) - i * delta, p.width, (p.height >> 1) - i * delta);\n            }\n\n            delta = 100;\n            piecesVer = Math.floor((p.width >> 1) / delta);\n            piecesHor = Math.floor((p.height >> 1) / delta);\n\n            p.stroke(244, 244, 244);\n            p.strokeWeight(1);\n            for (let i = 1; i <= piecesVer; i++) {\n                p.line((p.width >> 1) + i * delta, 0, (p.width >> 1) + i * delta, p.height);\n                p.line((p.width >> 1) - i * delta, 0, (p.width >> 1) - i * delta, p.height);\n            }\n            for (let i = 1; i <= piecesHor; i++) {\n                p.line(0, (p.height >> 1) + i * delta, p.width, (p.height >> 1) + i * delta);\n                p.line(0, (p.height >> 1) - i * delta, p.width, (p.height >> 1) - i * delta);\n            }\n\n            p.stroke(240, 240, 240);\n            p.strokeWeight(2);\n            p.line(p.width >> 1, 0, p.width >> 1, p.height);\n            p.line(0, p.height >> 1, p.width, p.height >> 1);\n        };\n    }, container);\n}\n"],"sourceRoot":""}