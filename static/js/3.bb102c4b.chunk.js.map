{"version":3,"sources":["components/editor/view/components/index.tsx","components/editor/view/resources/close.svg","components/editor/core/index.ts","components/editor/core/errors.ts","components/editor/view/components/button/index.tsx","components/editor/view/resources/help.svg","components/editor/view/resources/build.svg","components/editor/view/resources/code.svg","components/editor/view/index.ts","components/editor/index.ts"],"names":["_editor","_codeBox","_btnHelp","_status","_btnBuild","_btnClose","_helpBox","_mountedCallback","Editor","codeBoxRef","useRef","btnHelpRef","statusRef","btnBuildRef","btnCloseRef","helpBoxRef","useState","showingHelp","setShowingHelp","useEffect","current","addEventListener","svgHelp","svgBuild","svgClose","forEach","svgSrc","button","fetch","then","res","text","svg","innerHTML","className","id","ref","onInput","onClick","dispatchEvent","CustomEvent","detail","value","readOnly","setup","container","Promise","resolve","ReactDOM","render","requestAnimationFrame","setCode","setStatus","setHelp","resetStates","Event","_specificationSnapshot","generateAPI","Object","fromEntries","entries","getSpecificationSnapshot","map","elementName","specification","args","instanceID","addInstance","instance","getInstance","argLabels","length","arg","getArgType","removeInstance","items","category","push","type","api","elements","name","types","join","buildProgram","code","instructions","__transpile","__findSingleArgParam","instruction","InvalidArgumentError","__verifyArgParams","argObj","isBlock","exptParams","param","origParams","keys","includes","InvalidInstructionError","Array","filter","__buildInputSnapshotArgument","codeArgument","toString","argElem","treeSnapshotInputArgument","argMap","__buildInputSnapshotInstruction","codeInstruction","treeSnapshotInputInstruction","scope","item","snapshot","process","routine","crumbs","generateFromSnapshot","yamlToJson","e","_err","console","log","mark","message","reason","__verifyStructureValidity","generateSnapshot","resetProgram","resetSyntaxTree","SyntaxError","_name","_message","this","Error","_container","_svgCode","_svgClose","loadSrc","a","all","svgCode","setButtonImg","icon","_editorToolbarBtn","document","createElement","setupComponent","response","createItem","location","position","setupButton","getElement","element","setButtonState","state","mount","setupView","menu","getComponent","mountHook","btn","setState","_state","unsetToolbarExtended","toolbarContent","setToolbarExtended","pin","unpin","editor","appendChild"],"mappings":"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","file":"static/js/3.bb102c4b.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// -- resources ------------------------------------------------------------------------------------\n\nimport svgHelp from '../resources/help.svg';\nimport svgBuild from '../resources/build.svg';\nimport svgClose from '../resources/close.svg';\n\n// -- stylesheet -----------------------------------------------------------------------------------\n\nimport './index.scss';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _editor: HTMLDivElement;\nlet _codeBox: HTMLTextAreaElement;\nlet _btnHelp: HTMLButtonElement;\nlet _status: HTMLParagraphElement;\nlet _btnBuild: HTMLButtonElement;\nlet _btnClose: HTMLButtonElement;\nlet _helpBox: HTMLTextAreaElement;\n\nlet _mountedCallback: CallableFunction;\n\n// -- component definition -------------------------------------------------------------------------\n\n/**\n * Editor component.\n * @returns root JSX element of the Editor component\n */\nfunction Editor(): JSX.Element {\n  const codeBoxRef = useRef(null);\n  const btnHelpRef = useRef(null);\n  const statusRef = useRef(null);\n  const btnBuildRef = useRef(null);\n  const btnCloseRef = useRef(null);\n  const helpBoxRef = useRef(null);\n\n  const [showingHelp, setShowingHelp] = useState(false);\n\n  useEffect(() => {\n    _codeBox = codeBoxRef.current!;\n    _btnHelp = btnHelpRef.current!;\n    _status = statusRef.current!;\n    _btnBuild = btnBuildRef.current!;\n    _btnClose = btnCloseRef.current!;\n    _helpBox = helpBoxRef.current!;\n\n    _mountedCallback();\n\n    _editor.addEventListener('resetstates', () => {\n      setShowingHelp(false);\n    });\n\n    (\n      [\n        [svgHelp, _btnHelp],\n        [svgBuild, _btnBuild],\n        [svgClose, _btnClose],\n      ] as [string, HTMLButtonElement][]\n    ).forEach(([svgSrc, button]) => {\n      fetch(svgSrc)\n        .then((res) => res.text())\n        .then((svg) => (button.innerHTML = svg));\n    });\n  }, []);\n\n  return (\n    <>\n      <div className={`editor-wrapper ${showingHelp ? 'editor-wrapper-hidden' : ''}`}>\n        <textarea\n          id=\"editor-codebox\"\n          ref={codeBoxRef}\n          onInput={() => (_status.innerHTML = '')}\n        ></textarea>\n        <div id=\"editor-console\">\n          <button\n            id=\"editor-btn-help\"\n            ref={btnHelpRef}\n            onClick={() => setShowingHelp(true)}\n          ></button>\n          <div id=\"editor-status-wrapper\">\n            <p id=\"editor-status\" ref={statusRef}></p>\n          </div>\n          <button\n            id=\"editor-btn-build\"\n            ref={btnBuildRef}\n            onClick={() =>\n              _editor.dispatchEvent(\n                new CustomEvent<string>('buildprogram', {\n                  detail: _codeBox.value,\n                }),\n              )\n            }\n          ></button>\n        </div>\n      </div>\n      <div className={`editor-wrapper ${!showingHelp ? 'editor-wrapper-hidden' : ''}`}>\n        <textarea id=\"editor-help\" ref={helpBoxRef} readOnly></textarea>\n        <button\n          id=\"editor-help-close\"\n          ref={btnCloseRef}\n          onClick={() => setShowingHelp(false)}\n        ></button>\n      </div>\n    </>\n  );\n}\n\n/**\n * Mounts the React component inside the DOM container.\n * @param container DOM container\n * @returns a `Promise` of an object containing the DOM artboard and interactor elements\n */\nexport function setup(container: HTMLElement): Promise<void> {\n  return new Promise((resolve) => {\n    _editor = container as HTMLDivElement;\n    _editor.id = 'editor';\n\n    ReactDOM.render(<Editor />, container);\n\n    _mountedCallback = () => requestAnimationFrame(() => resolve());\n  });\n}\n\n/**\n * Sets the text code content of the codebox.\n * @param text text code content\n */\nexport function setCode(text: string): void {\n  _codeBox.value = text;\n}\n\n/**\n * Sets the text content of the status box.\n * @param text text content\n */\nexport function setStatus(text: string): void {\n  _status.innerHTML = text;\n}\n\n/**\n * Sets the text content of the help box.\n * @param text text content\n */\nexport function setHelp(text: string): void {\n  _helpBox.innerHTML = text;\n}\n\n/**\n * Resets the component states.\n */\nexport function resetStates(): void {\n  _editor.dispatchEvent(new Event('resetstates'));\n}\n","export default __webpack_public_path__ + \"static/media/close.b6f9ced0.svg\";","import { load as yamlToJson } from 'js-yaml';\n\nimport {\n    ITreeSnapshotInput,\n    generateFromSnapshot,\n    generateSnapshot,\n    resetSyntaxTree,\n    getSpecificationSnapshot,\n} from '@sugarlabs/musicblocks-v4-lib';\n\n/** @todo these should be exposed */\nimport {\n    TElementType,\n    IElementSpecificationSnapshot,\n} from '@sugarlabs/musicblocks-v4-lib/@types/specification';\n/** @todo these should be exposed */\nimport {\n    ITreeSnapshotDataInput,\n    ITreeSnapshotExpressionInput,\n    ITreeSnapshotStatementInput,\n    ITreeSnapshotBlockInput,\n} from '@sugarlabs/musicblocks-v4-lib/@types/syntaxTree';\n/** @todo these should not be required */\nimport {\n    addInstance,\n    getInstance,\n    removeInstance,\n} from '@sugarlabs/musicblocks-v4-lib/syntax/warehouse/warehouse';\n\nimport { ICodeArgumentObj, ICodeArgument, ICodeInstruction } from '../@types';\n\nimport { InvalidArgumentError, InvalidInstructionError } from './errors';\n\n// -- private variables ----------------------------------------------------------------------------\n\ninterface IElementSpecificationSnapshotWithArgs extends IElementSpecificationSnapshot {\n    args: [string, string[]][] | null;\n}\n\n/**\n * Snapshot entry table object with key-value pairs of element name and corresponding element\n * specification snapshot.\n */\nlet _specificationSnapshot: {\n    [name: string]: IElementSpecificationSnapshotWithArgs;\n};\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Generates the API for the loaded specification.\n * @returns list of valid instruction signatures\n */\nexport function generateAPI(): string {\n    _specificationSnapshot = Object.fromEntries(\n        Object.entries(getSpecificationSnapshot()).map(([elementName, specification]) => [\n            elementName,\n            { ...specification, args: null },\n        ]),\n    );\n\n    /**\n     * @todo args should be part of the supplied specification snapshot\n     * Add args to the specification.\n     */\n\n    Object.entries(_specificationSnapshot).forEach(([elementName, _]) => {\n        const instanceID = addInstance(elementName);\n        const instance = getInstance(instanceID)!.instance;\n\n        _specificationSnapshot[elementName]['args'] =\n            instance.argLabels.length === 0\n                ? null\n                : (instance.argLabels.map((arg) => [arg, instance.getArgType(arg)]) as [\n                      string,\n                      string[],\n                  ][]);\n\n        removeInstance(instanceID);\n    });\n\n    /**\n     * Group syntax elements by categories.\n     */\n\n    const items: {\n        [key: string]: [string, TElementType, [string, string[]][] | null][];\n    } = {};\n\n    Object.entries(_specificationSnapshot).forEach(([elementName, specification]) => {\n        const category = specification.category;\n\n        if (!(category in items)) {\n            items[category] = [];\n        }\n\n        items[category].push([elementName, specification.type, specification.args]);\n    });\n\n    /**\n     * Generate API.\n     */\n\n    const api: string[] = [];\n\n    Object.entries(items).forEach(([category, elements]) => {\n        api.push(`# \"${category}\" elements\\n# ------------------------`);\n        elements.forEach(([name, type, args]) => {\n            if (type === 'Data') {\n                api.push(`- [instruction]:\\n    [param]:\\n      ${name}: string`);\n            } else if (type === 'Expression') {\n                if (args === null) {\n                    // not possible\n                } else if (args.length === 1) {\n                    api.push(\n                        `- [instruction]:\\n    ${name}:\\n${args\n                            .map(([name, types]) => `      ${name}: ${types.join('|')}`)\n                            .join('\\n')}`,\n                    );\n                } else {\n                    api.push(\n                        `- [instruction]:\\n    [param]:\\n      ${name}:\\n${args\n                            .map(([name, types]) => `        ${name}: ${types.join('|')}`)\n                            .join('\\n')}`,\n                    );\n                }\n            } else if (type === 'Statement') {\n                if (args === null) {\n                    api.push(`- ${name}`);\n                } else if (args.length === 1) {\n                    api.push(`- ${name}: ${args[0][1].join('|')}`);\n                } else {\n                    api.push(\n                        `- ${name}:\\n${args\n                            .map(([name, types]) => `    ${name}: ${types.join('|')}`)\n                            .join('\\n')}`,\n                    );\n                }\n            } else if (type === 'Block') {\n                if (args === null) {\n                    api.push(`- ${name}:\\n    scope:\\n      - [instruction]\\n      - ...`);\n                } else {\n                    api.push(\n                        `- ${name}:\\n${args\n                            .map(([name, types]) => `    ${name}: ${types.join('|')}`)\n                            .join('\\n')}\\n    scope:\\n      - [instruction]\\n      - ...`,\n                    );\n                }\n            }\n        });\n        api.push('\\n');\n    });\n\n    return api.join('\\n');\n}\n\n/**\n * Validates code, transpiles it, and generates the Syntax Tree in the Programming Engine.\n * @param code editor's code\n * @returns a `Promise` that returns whether the process was successful\n */\nexport function buildProgram(code: string): Promise<boolean> {\n    let instructions: ICodeInstruction[];\n\n    function __verifyStructureValidity(): boolean {\n        try {\n            instructions = yamlToJson(code) as ICodeInstruction[];\n            return instructions instanceof Array;\n        } catch (e) {\n            const _err = e as {\n                mark: {\n                    buffer: string;\n                    column: number;\n                    line: number;\n                    name: string | null;\n                    position: number;\n                };\n                message: string;\n                name: string;\n                reason: string;\n            };\n            console.log({\n                mark: _err.mark,\n                message: _err.message,\n                name: _err.name,\n                reason: _err.reason,\n            });\n            return false;\n        }\n    }\n\n    function __transpile(): void {\n        function __findSingleArgParam(instruction: string): string {\n            const args = _specificationSnapshot[instruction].args;\n            if (args === null) {\n                throw new InvalidArgumentError(`\"${instruction}\" does not take arguments`);\n            } else if (args.length !== 1) {\n                throw new InvalidArgumentError(\n                    `\"${instruction}\" takes ${args.length} arguments but only 1 argument supplied`,\n                );\n            }\n\n            return args[0][0];\n        }\n\n        function __verifyArgParams(instruction: string, argObj: ICodeArgument): void {\n            const args = _specificationSnapshot[instruction].args;\n\n            if (args === null) {\n                throw new InvalidArgumentError(`\"${instruction}\" does not take arguments`);\n            }\n\n            const isBlock = _specificationSnapshot[instruction].type === 'Block';\n\n            const exptParams = args.map(([param, _]) => param);\n            const origParams = Object.keys(argObj);\n\n            if (isBlock) {\n                if (!origParams.includes('scope')) {\n                    throw new InvalidInstructionError(`\"${instruction}\" expects a scope`);\n                }\n\n                if (!((argObj as ICodeArgumentObj)['scope'] instanceof Array)) {\n                    throw new InvalidInstructionError(\n                        `\"${instruction}\" supplied with invalid scope`,\n                    );\n                }\n\n                exptParams.push('scope');\n            }\n\n            if (exptParams.length !== origParams.length) {\n                throw new InvalidArgumentError(\n                    `invalid number of arguments supplied for \"${instruction}\"`,\n                );\n            }\n\n            if (exptParams.filter((param) => !origParams.includes(param)).length !== 0) {\n                throw new InvalidArgumentError(`invalid arguments supplied for \"${instruction}\"`);\n            }\n        }\n\n        function __buildInputSnapshotArgument(\n            instruction: string,\n            param: string,\n            codeArgument: ICodeArgument,\n        ): ITreeSnapshotDataInput | ITreeSnapshotExpressionInput {\n            // code argument is a literal\n            if (typeof codeArgument !== 'object') {\n                return {\n                    elementName:\n                        typeof codeArgument === 'boolean'\n                            ? 'value-boolean'\n                            : typeof codeArgument === 'number'\n                            ? 'value-number'\n                            : 'value-string',\n                    value: codeArgument.toString(),\n                };\n            }\n\n            if (Object.keys(codeArgument).length !== 1) {\n                throw new InvalidArgumentError(\n                    `invalid argument for parameter \"${param}\" of \"${instruction}\"`,\n                );\n            }\n\n            // there's only one arg element\n            const [argElem, args] = Object.entries(codeArgument)[0];\n\n            // single arg but supplied as key-value pair\n            if (param === argElem) {\n                return __buildInputSnapshotArgument(instruction, param, args);\n            }\n\n            if (!(argElem in _specificationSnapshot)) {\n                throw new InvalidInstructionError(\n                    `\"${argElem}\" is not a valid argument for \"${argElem}\"`,\n                );\n            }\n\n            const specification = _specificationSnapshot[argElem];\n            if (specification.type === 'Data') {\n                if (typeof args === 'string') {\n                    return {\n                        elementName: argElem,\n                        value: args,\n                    };\n                }\n\n                throw new InvalidArgumentError(`invalid argument for 'Data' element \"${argElem}\"`);\n            } else if (specification.type === 'Expression') {\n                const treeSnapshotInputArgument: ITreeSnapshotExpressionInput = {\n                    elementName: '',\n                    argMap: null,\n                };\n\n                treeSnapshotInputArgument.elementName = argElem;\n\n                // single arg\n                if (typeof args !== 'object' || Object.keys(args).length === 1) {\n                    // can throw error\n                    const param = __findSingleArgParam(argElem);\n\n                    treeSnapshotInputArgument.argMap = Object.fromEntries([\n                        [param, __buildInputSnapshotArgument(argElem, param, args)],\n                    ]);\n                }\n                // multiple args\n                else {\n                    // can throw error\n                    __verifyArgParams(argElem, args);\n\n                    treeSnapshotInputArgument.argMap = Object.fromEntries(\n                        Object.entries(args).map(([param, arg]) => [\n                            param,\n                            __buildInputSnapshotArgument(argElem, param, arg),\n                        ]),\n                    );\n                }\n\n                return treeSnapshotInputArgument;\n            } else {\n                throw new InvalidArgumentError(\n                    `\"${argElem}\" is not a 'Data' or 'Expression' element`,\n                );\n            }\n        }\n\n        function __buildInputSnapshotInstruction(\n            codeInstruction: ICodeInstruction,\n        ): ITreeSnapshotStatementInput | ITreeSnapshotBlockInput {\n            // code instruction is a string\n            if (typeof codeInstruction === 'string') {\n                if (!(codeInstruction in _specificationSnapshot)) {\n                    throw new InvalidInstructionError(\n                        `\"${codeInstruction}\" is not a valid instruction`,\n                    );\n                }\n\n                return {\n                    elementName: codeInstruction,\n                    argMap: null,\n                };\n            }\n            // code instruction is an object\n            else {\n                if (Object.keys(codeInstruction).length !== 1) {\n                    throw new InvalidInstructionError('wrong instruction format encountered');\n                }\n\n                // there's only one instruction\n                const [instruction, args] = Object.entries(codeInstruction)[0];\n\n                if (!(instruction in _specificationSnapshot)) {\n                    throw new InvalidInstructionError(\n                        `\"${codeInstruction}\" is not a valid instruction`,\n                    );\n                }\n\n                const treeSnapshotInputInstruction:\n                    | ITreeSnapshotStatementInput\n                    | ITreeSnapshotBlockInput = {\n                    elementName: '',\n                    argMap: null,\n                };\n\n                treeSnapshotInputInstruction.elementName = instruction;\n\n                // single arg\n                if (typeof args !== 'object' || Object.keys(args).length === 1) {\n                    // can throw error\n                    const param = __findSingleArgParam(instruction);\n\n                    treeSnapshotInputInstruction.argMap = Object.fromEntries([\n                        [param, __buildInputSnapshotArgument(instruction, param, args)],\n                    ]);\n                }\n                // multiple args\n                else {\n                    // can throw error\n                    __verifyArgParams(instruction, args);\n\n                    treeSnapshotInputInstruction.argMap = Object.fromEntries(\n                        Object.entries(args)\n                            .filter(([param, _]) => param !== 'scope')\n                            .map(([param, arg]) => [\n                                param,\n                                __buildInputSnapshotArgument(instruction, param, arg),\n                            ]),\n                    );\n\n                    if ('scope' in args) {\n                        (treeSnapshotInputInstruction as ITreeSnapshotBlockInput).scope = (\n                            args['scope'] as unknown as ICodeInstruction[]\n                        ).map((item) => __buildInputSnapshotInstruction(item));\n                    }\n                }\n\n                return treeSnapshotInputInstruction;\n            }\n        }\n\n        const snapshot: ITreeSnapshotInput = {\n            process: [],\n            routine: [],\n            crumbs: [\n                (instructions as ICodeInstruction[]).map((instruction) =>\n                    __buildInputSnapshotInstruction(instruction),\n                ),\n            ],\n        };\n\n        generateFromSnapshot(snapshot);\n    }\n\n    return new Promise((resolve) => {\n        if (__verifyStructureValidity() === false) {\n            resolve(false);\n        } else {\n            const snapshot = generateSnapshot();\n            try {\n                __transpile();\n                resolve(true);\n            } catch (e) {\n                console.log(e);\n                generateFromSnapshot(snapshot);\n                resolve(false);\n            }\n        }\n    });\n}\n\n/**\n * Resets the program — generates an empty Syntax Tree.\n */\nexport function resetProgram(): void {\n    resetSyntaxTree();\n}\n","abstract class SyntaxError extends Error {\n    private _name: string;\n    private _message: string;\n\n    constructor(name: string, message: string) {\n        super(message);\n        this._name = name;\n        this._message = message;\n    }\n\n    public toString(): string {\n        return `${this._name}: ${this._message}`;\n    }\n\n    public get type(): string {\n        return this._name;\n    }\n}\n\nexport class InvalidInstructionError extends SyntaxError {\n    constructor(message: string) {\n        super('InvalidInstructionError', message);\n    }\n}\n\nexport class InvalidArgumentError extends SyntaxError {\n    constructor(message: string) {\n        super('InvalidArgumentError', message);\n    }\n}\n","// -- resources ------------------------------------------------------------------------------------\n\nimport svgCode from '../../resources/code.svg';\nimport svgClose from '../../resources/close.svg';\n\n// -- stylesheet -----------------------------------------------------------------------------------\n\nimport './index.scss';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _container: HTMLElement;\nlet _svgCode: string;\nlet _svgClose: string;\n\n// -- component definition -------------------------------------------------------------------------\n\n/**\n * Loads the SVG icons for the editor's toolbar button.\n * @param container DOM element of the editor's toolbar button\n */\nexport function setup(container: HTMLElement): void {\n  container.id = 'editor-toolbar-btn';\n  _container = container;\n\n  const loadSrc = async (svgSrc: string): Promise<string> => {\n    const svg = await fetch(svgSrc).then((res) => res.text());\n    return new Promise((resolve) => {\n      resolve(svg);\n    });\n  };\n\n  Promise.all([loadSrc(svgCode), loadSrc(svgClose)]).then(([svgCode, svgClose]) => {\n    [_svgCode, _svgClose] = [svgCode, svgClose];\n\n    setButtonImg('code');\n  });\n}\n\n/**\n * Sets the SVG icon for the editor's toolbar button.\n * @param icon icon name\n */\nexport function setButtonImg(icon: 'code' | 'cross'): void {\n  _container.innerHTML = icon === 'code' ? _svgCode : _svgClose;\n}\n","export default __webpack_public_path__ + \"static/media/help.70105245.svg\";","export default __webpack_public_path__ + \"static/media/build.8283c240.svg\";","export default __webpack_public_path__ + \"static/media/code.3211ece1.svg\";","import { createItem } from '@/view';\nimport { buildProgram } from '../core';\n\nimport { setStatus, setup as setupComponent } from './components';\nimport { setButtonImg, setup as setupButton } from './components/button';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _editor: HTMLDivElement;\nlet _editorToolbarBtn: HTMLElement;\n\n// -- private functions ----------------------------------------------------------------------------\n\n/**\n * Creates the DOM of the editor.\n */\nfunction _createEditor(): Promise<void> {\n    return new Promise((resolve) => {\n        _editor = document.createElement('div');\n\n        setupComponent(_editor).then(() => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            _editor.addEventListener('buildprogram', function (e: CustomEvent<string>) {\n                buildProgram(e.detail).then((response) =>\n                    setStatus(response ? 'Successfully Built' : 'Invalid Code'),\n                );\n            });\n\n            resolve();\n        });\n    });\n}\n\n/**\n * Creates the DOM of the editor's toolbar button.\n */\nfunction _createToolbarButton(): Promise<void> {\n    return new Promise((resolve) => {\n        _editorToolbarBtn = createItem({\n            location: 'toolbar',\n            type: 'button',\n            position: 'cluster-a',\n        });\n        setupButton(_editorToolbarBtn);\n        requestAnimationFrame(() => resolve());\n    });\n}\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Sets up the DOM elements.\n */\nexport function setup(): Promise<void> {\n    return new Promise((resolve) => {\n        (async () => {\n            await _createEditor();\n            await _createToolbarButton();\n            resolve();\n        })();\n    });\n}\n\n/**\n * Returns the individual DOM components.\n * @param element toolbar button or editor\n * @returns queried DOM component\n */\nexport function getElement(element: 'button' | 'editor'): HTMLElement {\n    return element === 'button' ? _editorToolbarBtn : _editor;\n}\n\n/**\n * Sets the icon for the editor's toolbar button based on whether it is clicked or not.\n * @param state `clicked` or `unclicked`\n */\nexport function setButtonState(state: 'clicked' | 'unclicked'): void {\n    setButtonImg(state === 'clicked' ? 'cross' : 'code');\n}\n\nexport { setCode, setHelp, setStatus, resetStates } from './components';\n","import { IComponentMenu } from '@/@types/components/menu';\n\nimport { getComponent } from '@/config';\nimport { setToolbarExtended, unsetToolbarExtended } from '@/view';\n\nimport {\n    getElement,\n    resetStates,\n    setButtonState,\n    setCode,\n    setHelp,\n    setStatus,\n    setup as setupView,\n} from './view';\nimport { generateAPI, resetProgram } from './core';\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Mounts the UI components.\n */\nexport function mount(): Promise<void> {\n    return new Promise((resolve) => {\n        (async () => {\n            await setupView();\n            resolve();\n        })();\n    });\n}\n\n/**\n * Initializes the component.\n */\nexport function setup(): Promise<void> {\n    return new Promise((resolve) => {\n        const menu = getComponent('menu');\n        if (menu) {\n            (menu as IComponentMenu).mountHook('reset', () => {\n                setStatus('');\n                resetProgram();\n            });\n        }\n\n        setCode(`- clear\n\n# -------------\n# first hexagon\n# -------------\n\n- set-thickness: 4\n- set-color: 5\n- repeat:\n    times:\n      operator-math-plus:\n        operand1: 4\n        operand2: 2\n    scope:\n      - move-forward: 100\n      - turn-right: 60\n\n# --------------\n# second hexagon\n# --------------\n\n- set-color: 9\n- repeat:\n    times: 6\n    scope:\n      - move-forward: 100\n      - turn-left: 60`);\n\n        setCode(`- box-number:\n    name: \"a\"\n    value: 0\n- box-number:\n    name: \"b\"\n    value: 1\n- box-number:\n    name: \"c\"\n    value: 0\n- set-thickness:\n    value:\n      4\n- repeat:\n    times: 10\n    scope:\n      - print:\n          boxidentifier-number: \"a\"\n      - set-color:\n          boxidentifier-number: \"b\"\n      - repeat:\n          times: 6\n          scope:\n            - move-forward:\n                operator-math-times:\n                  operand1:\n                    boxidentifier-number: \"a\"\n                  operand2: 8\n            - turn-left: 90\n      - box-number:\n          name: \"c\"\n          value:\n            operator-math-plus:\n              operand1:\n                boxidentifier-number: \"a\"\n              operand2:\n                boxidentifier-number: \"b\"\n      - box-number:\n          name: \"a\"\n          value:\n            boxidentifier-number: \"b\"\n      - box-number:\n          name: \"b\"\n          value:\n            boxidentifier-number: \"c\"`);\n\n        setHelp(generateAPI());\n\n        const btn = getElement('button');\n\n        let state: 'initial' | 'float' | 'pinned' = 'initial';\n\n        const setState = (_state: 'initial' | 'float' | 'pinned') => {\n            if (_state === 'initial') {\n                unsetToolbarExtended();\n                resetStates();\n            } else {\n                const toolbarContent = setToolbarExtended('Editor', _state, {\n                    pin: () => setState('pinned'),\n                    unpin: () => setState('float'),\n                });\n                const editor = getElement('editor');\n                toolbarContent.appendChild(editor);\n            }\n            state = _state;\n        };\n\n        btn.addEventListener('click', () => {\n            if (state === 'initial') {\n                setButtonState('clicked');\n                setState('float');\n            } else {\n                setButtonState('unclicked');\n                setState('initial');\n            }\n        });\n\n        resolve();\n    });\n}\n"],"sourceRoot":""}