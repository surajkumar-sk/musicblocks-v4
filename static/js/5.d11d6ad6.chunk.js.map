{"version":3,"sources":["components/menu/view/components/index.tsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","components/menu/view/resources/run.svg","components/menu/view/resources/stop.svg","components/menu/view/resources/reset.svg","components/menu/view/index.ts","components/menu/index.ts"],"names":["_container","_labels","_btnRun","_btnStop","_btnReset","_mountedCallback","_states","running","Menu","props","btnRunRef","useRef","btnStopRef","btnResetRef","useEffect","current","loadSVG","element","svgSrc","fetch","then","res","text","svg","innerHTML","children","classList","add","svgRun","svgStop","svgReset","className","states","ref","run","stop","reset","_renderComponent","ReactDOM","render","setup","container","labels","Promise","resolve","requestAnimationFrame","btnRun","btnStop","btnReset","updateState","state","value","newStates","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","menu","createItem","location","type","position","id","setupComponent","getButtons","mount","setupView","buttons","addEventListener","getCrumbs","nodeID","setTimeout","mountHook","name","callback"],"mappings":"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","file":"static/js/5.d11d6ad6.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\n// -- resources ------------------------------------------------------------------------------------\n\nimport svgRun from '../resources/run.svg';\nimport svgStop from '../resources/stop.svg';\nimport svgReset from '../resources/reset.svg';\n\n// -- stylesheet -----------------------------------------------------------------------------------\n\nimport './index.scss';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _container: HTMLElement;\nlet _labels: { run: string; stop: string; reset: string };\nlet _states: { running: boolean } = { running: false };\n\nlet _btnRun: HTMLButtonElement;\nlet _btnStop: HTMLButtonElement;\nlet _btnReset: HTMLButtonElement;\n\nlet _mountedCallback: CallableFunction;\n\n// -- component definition -------------------------------------------------------------------------\n\n/**\n * Menu component.\n * @params props React props (SVG sources)\n * @returns root JSX element of the Menu component\n */\nfunction Menu(props: { states: { running: boolean } }): JSX.Element {\n  const btnRunRef = useRef(null);\n  const btnStopRef = useRef(null);\n  const btnResetRef = useRef(null);\n\n  useEffect(() => {\n    _btnRun = btnRunRef.current!;\n    _btnStop = btnStopRef.current!;\n    _btnReset = btnResetRef.current!;\n\n    _mountedCallback();\n\n    const loadSVG = (element: HTMLElement, svgSrc: string) => {\n      fetch(svgSrc)\n        .then((res) => res.text())\n        .then((svg) => (element.innerHTML += svg))\n        .then(() => (element.children[1] as SVGElement).classList.add('menu-btn-img'));\n    };\n\n    loadSVG(btnRunRef.current! as HTMLElement, svgRun);\n    loadSVG(btnStopRef.current! as HTMLElement, svgStop);\n    loadSVG(btnResetRef.current! as HTMLElement, svgReset);\n  }, []);\n\n  return (\n    <>\n      <button\n        className={`menu-btn ${props.states['running'] ? 'menu-btn-hidden' : ''}`}\n        ref={btnRunRef}\n      >\n        <p className=\"menu-btn-label\">\n          <span>{_labels.run}</span>\n        </p>\n      </button>\n      <button\n        className={`menu-btn ${!props.states['running'] ? 'menu-btn-hidden' : ''}`}\n        ref={btnStopRef}\n      >\n        <p className=\"menu-btn-label\">\n          <span>{_labels.stop}</span>\n        </p>\n      </button>\n      <button className=\"menu-btn\" ref={btnResetRef}>\n        <p className=\"menu-btn-label\">\n          <span>{_labels.reset}</span>\n        </p>\n      </button>\n    </>\n  );\n}\n\n// -- private functions ----------------------------------------------------------------------------\n\n/**\n * Calls the renderer for the Menu component.\n */\nfunction _renderComponent(): void {\n  ReactDOM.render(<Menu states={{ ..._states }} />, _container);\n}\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Setup the Menu component.\n * @param container DOM container for the Menu component.\n * @param props Menu component props\n * @returns a `Promise` that the component has been mounted\n */\nexport function setup(\n  container: HTMLElement,\n  props: {\n    labels: { run: string; stop: string; reset: string };\n  },\n): Promise<{\n  btnRun: HTMLButtonElement;\n  btnStop: HTMLButtonElement;\n  btnReset: HTMLButtonElement;\n}> {\n  _container = container;\n  _labels = props.labels;\n\n  return new Promise((resolve) => {\n    _renderComponent();\n\n    _mountedCallback = () =>\n      requestAnimationFrame(() => {\n        resolve({\n          btnRun: _btnRun,\n          btnStop: _btnStop,\n          btnReset: _btnReset,\n        });\n      });\n  });\n}\n\n/**\n * Updates the component state.\n * @param state state name\n * @param value value of the state\n */\nexport function updateState(state: 'running', value: boolean): void {\n  const newStates = { ..._states };\n  newStates[state] = value;\n  _states = newStates;\n\n  _renderComponent();\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","export default __webpack_public_path__ + \"static/media/run.49c3045d.svg\";","export default __webpack_public_path__ + \"static/media/stop.3b566c06.svg\";","export default __webpack_public_path__ + \"static/media/reset.d6862c27.svg\";","import { createItem } from '@/view';\n\nimport { setup as setupComponent } from './components';\n\n// import './index.scss';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _btnRun: HTMLButtonElement;\nlet _btnStop: HTMLButtonElement;\nlet _btnReset: HTMLButtonElement;\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Sets up the DOM.\n */\nexport function setup(): Promise<void> {\n    return new Promise((resolve) => {\n        const menu = createItem({\n            location: 'toolbar',\n            type: 'container',\n            position: 'cluster-b',\n        });\n        menu.id = 'menu';\n\n        setupComponent(menu, {\n            labels: {\n                run: 'run',\n                stop: 'stop',\n                reset: 'reset',\n            },\n        }).then(({ btnRun, btnReset, btnStop }) => {\n            [_btnRun, _btnStop, _btnReset] = [btnRun, btnStop, btnReset];\n            resolve();\n        });\n    });\n}\n\n/**\n * @returns DOM `run`, `stop`, and `reset` buttons\n */\nexport function getButtons(): {\n    run: HTMLButtonElement;\n    stop: HTMLButtonElement;\n    reset: HTMLButtonElement;\n} {\n    return {\n        run: _btnRun,\n        stop: _btnStop,\n        reset: _btnReset,\n    };\n}\n\nexport { updateState } from './components';\n","import { getCrumbs, run } from '@sugarlabs/musicblocks-v4-lib';\n\nimport { getButtons, setup as setupView, updateState } from './view';\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Mounts the Menu component.\n */\nexport function mount(): Promise<void> {\n    return setupView();\n}\n\n/**\n * Initializes the Menu component.\n */\nexport function setup(): Promise<void> {\n    return new Promise((resolve) => {\n        requestAnimationFrame(() => {\n            const buttons = getButtons();\n            buttons.run.addEventListener('click', () => {\n                const crumbs = getCrumbs();\n                if (crumbs.length !== 0) run(getCrumbs()[0].nodeID);\n                updateState('running', true);\n                setTimeout(() => updateState('running', false));\n            });\n            buttons.stop.addEventListener('click', () => {\n                updateState('running', false);\n            });\n            buttons.reset.addEventListener('click', () => {\n                updateState('running', false);\n            });\n\n            resolve();\n        });\n    });\n}\n\nexport function mountHook(name: 'run', callback: CallableFunction): void;\nexport function mountHook(name: 'reset', callback: CallableFunction): void;\n/**\n * Mounts a callback associated with a special hook name.\n * @param name name of the hook\n * @param callback callback function to associate with the hook\n */\nexport function mountHook(name: string, callback: CallableFunction): void {\n    const buttons = getButtons();\n\n    if (name === 'run') {\n        buttons.run.addEventListener('click', () => callback());\n    } else if (name === 'reset') {\n        buttons.reset.addEventListener('click', () => callback());\n    }\n}\n"],"sourceRoot":""}