{"version":3,"sources":["components/painter/view/components/index.tsx","components/painter/view/components/utils/background.ts","components/painter/view/index.ts","components/painter/view/sprite.ts","components/painter/view/resources/mouse.svg"],"names":["_artboard","_artboardBackground","_interactor","_mountedCallback","Painter","backgroundRef","useRef","artboardRef","artboardBackgroundRef","interactorRef","useEffect","current","setupCartesian","id","ref","className","setup","container","Promise","resolve","ReactDOM","render","requestAnimationFrame","artboard","artboardBackground","interactor","getBoundingClientRect","width","height","p5","p","createCanvas","noLoop","delta","piecesVer","Math","floor","piecesHor","stroke","strokeWeight","i","line","_artboardSketch","mount","createItem","location","setupComponent","then","setupSprite","mountSketch","sketch","sketchCanvas","children","style","position","left","transform","updateBackgroundColor","type","color","backgroundColor","r","g","b","_sprite","_spriteSVG","_spriteSrc","mouseSVG","spriteWrapper","document","createElement","classList","add","bottom","appendChild","fetch","res","text","svg","innerHTML","spriteElem","updatePosition","x","y","updateHeading","heading","updateAccent","fill","querySelectorAll","forEach","item","setAttribute","remove"],"mappings":"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","file":"static/js/8.dd6f36f5.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { setupCartesian } from './utils/background';\n\n// -- stylesheet -----------------------------------------------------------------------------------\n\nimport './index.scss';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _artboard: HTMLDivElement;\nlet _artboardBackground: HTMLDivElement;\nlet _interactor: HTMLDivElement;\n\nlet _mountedCallback: CallableFunction;\n\n// -- component definition -------------------------------------------------------------------------\n\n/**\n * Painter component.\n * @returns root JSX element of the Painter component\n */\nfunction Painter(): JSX.Element {\n  const backgroundRef = useRef(null);\n  const artboardRef = useRef(null);\n  const artboardBackgroundRef = useRef(null);\n  const interactorRef = useRef(null);\n\n  useEffect(() => {\n    _artboard = artboardRef.current!;\n    _artboardBackground = artboardBackgroundRef.current!;\n    _interactor = interactorRef.current!;\n\n    _mountedCallback();\n\n    setupCartesian(backgroundRef.current!);\n  }, []);\n\n  return (\n    <>\n      <section id=\"artboard-wrapper\">\n        <div id=\"artboard-background\" ref={backgroundRef}></div>\n        <div id=\"artboard-container\">\n          <div className=\"artboard\" ref={artboardRef}></div>\n          <div className=\"artboard-background\" ref={artboardBackgroundRef}></div>\n        </div>\n        <div id=\"artboard-interactor\" ref={interactorRef}></div>\n      </section>\n    </>\n  );\n}\n\n/**\n * Mounts the React component inside the DOM container.\n * @param container DOM container\n * @returns a `Promise` of an object containing the DOM artboard and interactor elements\n */\nexport function setup(container: HTMLElement): Promise<{\n  artboard: HTMLDivElement;\n  artboardBackground: HTMLDivElement;\n  interactor: HTMLDivElement;\n}> {\n  return new Promise((resolve) => {\n    ReactDOM.render(<Painter />, container);\n\n    _mountedCallback = () =>\n      requestAnimationFrame(() => {\n        resolve({\n          artboard: _artboard,\n          artboardBackground: _artboardBackground,\n          interactor: _interactor,\n        });\n      });\n  });\n}\n","import p5 from 'p5';\n\n/**\n * Sets up a canvas with a cartesian grid.\n * @param container DOM container of the grid\n */\nexport function setupCartesian(container: HTMLElement): void {\n    const { width, height } = container.getBoundingClientRect();\n\n    new p5((p: p5) => {\n        p.setup = () => {\n            p.createCanvas(width, height);\n            p.noLoop();\n\n            let delta = 10;\n            let piecesVer = Math.floor((p.width >> 1) / delta);\n            let piecesHor = Math.floor((p.height >> 1) / delta);\n\n            p.stroke(252, 252, 252);\n            p.strokeWeight(1);\n            for (let i = 1; i <= piecesVer; i++) {\n                p.line((p.width >> 1) + i * delta, 0, (p.width >> 1) + i * delta, p.height);\n                p.line((p.width >> 1) - i * delta, 0, (p.width >> 1) - i * delta, p.height);\n            }\n            for (let i = 1; i <= piecesHor; i++) {\n                p.line(0, (p.height >> 1) + i * delta, p.width, (p.height >> 1) + i * delta);\n                p.line(0, (p.height >> 1) - i * delta, p.width, (p.height >> 1) - i * delta);\n            }\n\n            delta = 100;\n            piecesVer = Math.floor((p.width >> 1) / delta);\n            piecesHor = Math.floor((p.height >> 1) / delta);\n\n            p.stroke(244, 244, 244);\n            p.strokeWeight(1);\n            for (let i = 1; i <= piecesVer; i++) {\n                p.line((p.width >> 1) + i * delta, 0, (p.width >> 1) + i * delta, p.height);\n                p.line((p.width >> 1) - i * delta, 0, (p.width >> 1) - i * delta, p.height);\n            }\n            for (let i = 1; i <= piecesHor; i++) {\n                p.line(0, (p.height >> 1) + i * delta, p.width, (p.height >> 1) + i * delta);\n                p.line(0, (p.height >> 1) - i * delta, p.width, (p.height >> 1) - i * delta);\n            }\n\n            p.stroke(240, 240, 240);\n            p.strokeWeight(2);\n            p.line(p.width >> 1, 0, p.width >> 1, p.height);\n            p.line(0, p.height >> 1, p.width, p.height >> 1);\n        };\n    }, container);\n}\n","import { ISketch } from '../@types';\n\nimport { createItem } from '@/view';\nimport { setup as setupComponent } from './components';\nimport { setup as setupSprite } from './sprite';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _artboardSketch: HTMLElement;\nlet _artboardBackground: HTMLElement;\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Initializes the Painter DOM.\n */\nexport function mount(): Promise<void> {\n    return new Promise((resolve) => {\n        const container = createItem({ location: 'workspace' });\n        container.id = 'painter';\n\n        setupComponent(container).then(({ artboard, artboardBackground, interactor }) => {\n            _artboardSketch = artboard;\n            _artboardBackground = artboardBackground;\n            setupSprite(interactor);\n\n            resolve();\n        });\n    });\n}\n\n/**\n * Mounts the sketch canvas inside the artboard.\n * @param sketch sketch instance\n */\nexport function mountSketch(sketch: ISketch): Promise<void> {\n    return new Promise((resolve) => {\n        sketch.setup(_artboardSketch!);\n\n        requestAnimationFrame(() => {\n            const sketchCanvas = _artboardSketch.children[0] as HTMLCanvasElement;\n            sketchCanvas.style.position = 'absolute';\n            sketchCanvas.style.left = '50%';\n            sketchCanvas.style.transform = 'translateX(-50%)';\n\n            resolve();\n        });\n    });\n}\n\n/**\n * Removes the artboard container's background color.\n */\nexport function updateBackgroundColor(type: 'unset'): void;\n/**\n * Sets the artboard container's background color.\n * @param color background color\n */\nexport function updateBackgroundColor(type: 'set', color: [number, number, number]): void;\n/**\n * Updates the artboard container's background color.\n * @param type `set` to set background color, `unset` to remove background color\n * @param color background color\n */\nexport function updateBackgroundColor(\n    type: 'set' | 'unset',\n    color?: [number, number, number],\n): void {\n    if (type === 'unset') {\n        _artboardBackground.style.backgroundColor = 'unset';\n    } else {\n        const [r, g, b] = color!;\n        _artboardBackground.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;\n    }\n}\n","import mouseSVG from './resources/mouse.svg';\n\n// -- private variables ----------------------------------------------------------------------------\n\n/** Source URL of the sprite's SVG. */\nconst _spriteSrc = mouseSVG;\n\n/** DOM element representing the sprite wrapper. */\nlet _sprite: HTMLElement;\n/** SVG element of the sprite. */\nlet _spriteSVG: SVGElement;\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Initializes the sprite.\n * @param interactor - DOM container for the interactor (wrapper for the sprite)\n */\nexport function setup(interactor: HTMLElement): void {\n    const spriteWrapper = document.createElement('div');\n    spriteWrapper.classList.add('artboard-sprite-wrapper');\n    spriteWrapper.style.left = '50%';\n    spriteWrapper.style.bottom = '50%';\n    spriteWrapper.style.transform = 'translate(-50%, 50%)';\n    interactor.appendChild(spriteWrapper);\n\n    _sprite = spriteWrapper;\n\n    // fetches the SVG source string from the .svg source file's URL\n    fetch(_spriteSrc)\n        .then((res) => res.text())\n        .then((svg) => {\n            spriteWrapper.innerHTML = svg;\n\n            const spriteElem = spriteWrapper.children[0] as SVGElement;\n            spriteElem.classList.add('artboard-sprite');\n\n            _spriteSVG = spriteElem;\n        });\n}\n\n/**\n * Updates the position of the sprite.\n * @param x - x co-ordinate\n * @param y - y co-ordinate\n */\nexport function updatePosition(x: number, y: number): void {\n    _sprite.style.left = `calc(50% + ${x}px)`;\n    _sprite.style.bottom = `calc(50% + ${y}px)`;\n}\n\n/**\n * Updates the heading of the sprite.\n * @param heading - heading anglestate\n */\nexport function updateHeading(heading: number): void {\n    _sprite.style.transform = `translate(-50%, 50%) rotate(${-heading}deg)`;\n}\n\n/**\n * Defaults the color accent of the sprite.\n */\nexport function updateAccent(type: 'unset'): void;\n/**\n * Sets the color accent of the sprite.\n * @param fill fill color\n * @param stroke stroke color\n */\nexport function updateAccent(type: 'set', fill: string, stroke: string): void;\nexport function updateAccent(type: 'set' | 'unset', fill?: string, stroke?: string): void {\n    if (type === 'unset') {\n        _spriteSVG.querySelectorAll('.path-fill').forEach((item) => {\n            item.classList.add('path-fill-default');\n            item.setAttribute('fill', '');\n        });\n        _spriteSVG.querySelectorAll('.path-stroke').forEach((item) => {\n            item.classList.add('path-stroke-default');\n            item.setAttribute('stroke', '');\n        });\n        _spriteSVG.querySelectorAll('.path-fill-stroke').forEach((item) => {\n            item.classList.add('path-fill-stroke-default');\n            item.setAttribute('fill', '');\n            item.setAttribute('stroke', '');\n        });\n        return;\n    }\n\n    _spriteSVG.querySelectorAll('.path-fill').forEach((item) => {\n        item.classList.remove('path-fill-default');\n        item.setAttribute('fill', fill!);\n    });\n    _spriteSVG.querySelectorAll('.path-stroke').forEach((item) => {\n        item.classList.remove('path-stroke-default');\n        item.setAttribute('stroke', stroke!);\n    });\n    _spriteSVG.querySelectorAll('.path-fill-stroke').forEach((item) => {\n        item.classList.remove('path-fill-stroke-default');\n        item.setAttribute('fill', stroke!);\n        item.setAttribute('stroke', stroke!);\n    });\n}\n","export default __webpack_public_path__ + \"static/media/mouse.19733222.svg\";"],"sourceRoot":""}