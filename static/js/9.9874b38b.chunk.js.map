{"version":3,"sources":["components/editor/view/components/index.tsx","components/editor/view/resources/close.svg","components/editor/view/resources/help.svg","components/editor/view/resources/build.svg"],"names":["_editor","_codeBox","_btnHelp","_status","_btnBuild","_btnClose","_helpBox","_mountedCallback","Editor","codeBoxRef","useRef","btnHelpRef","statusRef","btnBuildRef","btnCloseRef","helpBoxRef","useState","showingHelp","setShowingHelp","useEffect","current","addEventListener","svgHelp","svgBuild","svgClose","forEach","svgSrc","button","fetch","then","res","text","svg","innerHTML","className","id","ref","onInput","onClick","dispatchEvent","CustomEvent","detail","value","readOnly","setup","container","Promise","resolve","ReactDOM","render","requestAnimationFrame","setCode","setStatus","setHelp","resetStates","Event"],"mappings":"8UAeIA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,E,sEAQJ,SAASC,IACP,IAAMC,EAAaC,iBAAO,MACpBC,EAAaD,iBAAO,MACpBE,EAAYF,iBAAO,MACnBG,EAAcH,iBAAO,MACrBI,EAAcJ,iBAAO,MACrBK,EAAaL,iBAAO,MAE1B,EAAsCM,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KA6BA,OA3BAC,qBAAU,WACRlB,EAAWQ,EAAWW,QACtBlB,EAAWS,EAAWS,QACtBjB,EAAUS,EAAUQ,QACpBhB,EAAYS,EAAYO,QACxBf,EAAYS,EAAYM,QACxBd,EAAWS,EAAWK,QAEtBb,IAEAP,EAAQqB,iBAAiB,eAAe,WACtCH,GAAe,MAIf,CACE,CAACI,UAASpB,GACV,CAACqB,UAAUnB,GACX,CAACoB,UAAUnB,IAEboB,SAAQ,YAAuB,IAAD,mBAApBC,EAAoB,KAAZC,EAAY,KAC9BC,MAAMF,GACHG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUL,EAAOM,UAAYD,UAEtC,IAGD,qCACE,sBAAKE,UAAS,yBAAoBjB,EAAc,wBAA0B,IAA1E,UACE,0BACEkB,GAAG,iBACHC,IAAK3B,EACL4B,QAAS,kBAAOlC,EAAQ8B,UAAY,MAEtC,sBAAKE,GAAG,iBAAR,UACE,wBACEA,GAAG,kBACHC,IAAKzB,EACL2B,QAAS,kBAAMpB,GAAe,MAEhC,qBAAKiB,GAAG,wBAAR,SACE,mBAAGA,GAAG,gBAAgBC,IAAKxB,MAE7B,wBACEuB,GAAG,mBACHC,IAAKvB,EACLyB,QAAS,kBACPtC,EAAQuC,cACN,IAAIC,YAAoB,eAAgB,CACtCC,OAAQxC,EAASyC,kBAO7B,sBAAKR,UAAS,yBAAqBjB,EAAwC,GAA1B,yBAAjD,UACE,0BAAUkB,GAAG,cAAcC,IAAKrB,EAAY4B,UAAQ,IACpD,wBACER,GAAG,oBACHC,IAAKtB,EACLwB,QAAS,kBAAMpB,GAAe,YAYjC,SAAS0B,EAAMC,GACpB,OAAO,IAAIC,SAAQ,SAACC,IAClB/C,EAAU6C,GACFV,GAAK,SAEba,IAASC,OAAO,cAACzC,EAAD,IAAYqC,GAE5BtC,EAAmB,kBAAM2C,uBAAsB,kBAAMH,WAQlD,SAASI,EAAQpB,GACtB9B,EAASyC,MAAQX,EAOZ,SAASqB,EAAUrB,GACxB5B,EAAQ8B,UAAYF,EAOf,SAASsB,EAAQtB,GACtBzB,EAAS2B,UAAYF,EAMhB,SAASuB,IACdtD,EAAQuC,cAAc,IAAIgB,MAAM,kB,gCC1JlC,OAAe,cAA0B,mC,gCCAzC,OAAe,cAA0B,kC,gCCAzC,OAAe,cAA0B,mC","file":"static/js/9.9874b38b.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// -- resources ------------------------------------------------------------------------------------\n\nimport svgHelp from '../resources/help.svg';\nimport svgBuild from '../resources/build.svg';\nimport svgClose from '../resources/close.svg';\n\n// -- stylesheet -----------------------------------------------------------------------------------\n\nimport './index.scss';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _editor: HTMLDivElement;\nlet _codeBox: HTMLTextAreaElement;\nlet _btnHelp: HTMLButtonElement;\nlet _status: HTMLParagraphElement;\nlet _btnBuild: HTMLButtonElement;\nlet _btnClose: HTMLButtonElement;\nlet _helpBox: HTMLTextAreaElement;\n\nlet _mountedCallback: CallableFunction;\n\n// -- component definition -------------------------------------------------------------------------\n\n/**\n * Editor component.\n * @returns root JSX element of the Editor component\n */\nfunction Editor(): JSX.Element {\n  const codeBoxRef = useRef(null);\n  const btnHelpRef = useRef(null);\n  const statusRef = useRef(null);\n  const btnBuildRef = useRef(null);\n  const btnCloseRef = useRef(null);\n  const helpBoxRef = useRef(null);\n\n  const [showingHelp, setShowingHelp] = useState(false);\n\n  useEffect(() => {\n    _codeBox = codeBoxRef.current!;\n    _btnHelp = btnHelpRef.current!;\n    _status = statusRef.current!;\n    _btnBuild = btnBuildRef.current!;\n    _btnClose = btnCloseRef.current!;\n    _helpBox = helpBoxRef.current!;\n\n    _mountedCallback();\n\n    _editor.addEventListener('resetstates', () => {\n      setShowingHelp(false);\n    });\n\n    (\n      [\n        [svgHelp, _btnHelp],\n        [svgBuild, _btnBuild],\n        [svgClose, _btnClose],\n      ] as [string, HTMLButtonElement][]\n    ).forEach(([svgSrc, button]) => {\n      fetch(svgSrc)\n        .then((res) => res.text())\n        .then((svg) => (button.innerHTML = svg));\n    });\n  }, []);\n\n  return (\n    <>\n      <div className={`editor-wrapper ${showingHelp ? 'editor-wrapper-hidden' : ''}`}>\n        <textarea\n          id=\"editor-codebox\"\n          ref={codeBoxRef}\n          onInput={() => (_status.innerHTML = '')}\n        ></textarea>\n        <div id=\"editor-console\">\n          <button\n            id=\"editor-btn-help\"\n            ref={btnHelpRef}\n            onClick={() => setShowingHelp(true)}\n          ></button>\n          <div id=\"editor-status-wrapper\">\n            <p id=\"editor-status\" ref={statusRef}></p>\n          </div>\n          <button\n            id=\"editor-btn-build\"\n            ref={btnBuildRef}\n            onClick={() =>\n              _editor.dispatchEvent(\n                new CustomEvent<string>('buildprogram', {\n                  detail: _codeBox.value,\n                }),\n              )\n            }\n          ></button>\n        </div>\n      </div>\n      <div className={`editor-wrapper ${!showingHelp ? 'editor-wrapper-hidden' : ''}`}>\n        <textarea id=\"editor-help\" ref={helpBoxRef} readOnly></textarea>\n        <button\n          id=\"editor-help-close\"\n          ref={btnCloseRef}\n          onClick={() => setShowingHelp(false)}\n        ></button>\n      </div>\n    </>\n  );\n}\n\n/**\n * Mounts the React component inside the DOM container.\n * @param container DOM container\n * @returns a `Promise` of an object containing the DOM artboard and interactor elements\n */\nexport function setup(container: HTMLElement): Promise<void> {\n  return new Promise((resolve) => {\n    _editor = container as HTMLDivElement;\n    _editor.id = 'editor';\n\n    ReactDOM.render(<Editor />, container);\n\n    _mountedCallback = () => requestAnimationFrame(() => resolve());\n  });\n}\n\n/**\n * Sets the text code content of the codebox.\n * @param text text code content\n */\nexport function setCode(text: string): void {\n  _codeBox.value = text;\n}\n\n/**\n * Sets the text content of the status box.\n * @param text text content\n */\nexport function setStatus(text: string): void {\n  _status.innerHTML = text;\n}\n\n/**\n * Sets the text content of the help box.\n * @param text text content\n */\nexport function setHelp(text: string): void {\n  _helpBox.innerHTML = text;\n}\n\n/**\n * Resets the component states.\n */\nexport function resetStates(): void {\n  _editor.dispatchEvent(new Event('resetstates'));\n}\n","export default __webpack_public_path__ + \"static/media/close.b6f9ced0.svg\";","export default __webpack_public_path__ + \"static/media/help.70105245.svg\";","export default __webpack_public_path__ + \"static/media/build.8283c240.svg\";"],"sourceRoot":""}